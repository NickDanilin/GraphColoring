Справка по приложению «Раскраска графа»

Данное приложение позволяет загружать неориентированный связный граф, заданный списком смежности, выбирать один из двух алгоритмов раскраски (DSATUR или RLF) и получать результат либо на экране, либо в JSON-файл.

Как использовать:
 1. Введите данные.
 2. Выберите алгоритм раскраски.
    DSATUR - жадный алгоритм по степени насыщенности.
    RLF - алгоритм Recursive Largest First. Дает более компактную раскраску, но медленнее на больших графах.
 3. Выберите способ вывода результата.


Формат input-JSON (поле “adjacency_list” обязательно):
  {
    "adjacency_list": {
      "1": [2,3],
      "2": [1,3,4],
      "3": [1,2],
      "4": [2]
    }
  }
  – Ключи «1», «2», … «n» — номера вершин (целые ≥ 1).
  – Значения — массив соседних вершин (каждое число от 1 до n).
  – Список смежности должен быть симметричным: если в «1» есть «2», то и в «2» должен быть «1».
  – Граф должен быть связным (одна компонента).
  – Пример для двудольного графа из 3 вершин:
    {
      "adjacency_list": {
        "1": [2],
        "2": [1, 3],
        "3": [2]
      }
    }

Частые ошибки при вводе:
  • Неправильный JSON-синтаксис (отсутствуют кавычки, запятые).
  • Поле «adjacency_list» отсутствует или пусто.
  • Несимметричная структура: например, «1» -> «2», а «2» не содержит «1».
  • В ручном вводе введены нечисловые символы или числа вне диапазона [1..n].
  • Повторяющиеся соседи: в одной строке «2 2 3» — дубликат «2».
  • Граф несвязен (ручной или в JSON).

  Примечание про алгоритмы:
    – DSATUR (Degree of Saturation): на каждом шаге выбирает вершину с максимальным числом разных цветов среди её уже окрашенных соседей; при равенстве — с максимальной исходной степенью.
    – RLF (Recursive Largest First): строит цветовые классы, каждый раз подбирая максимально большое независимое множество по определённым эвристикам.

  Условие корректности графа:
    1. Связность: из любой вершины можно добраться до всех остальных.
    2. Симметрия: если i сосед j, то j сосед i.
    3. Количество вершин n ≥ 1.

